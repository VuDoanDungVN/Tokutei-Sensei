import React, { useState, useContext } from 'react';
import { AppScreen } from '../../types';
import { AppContext } from '../../App';
import { authService } from '../../services/firebase';
import Card from '../shared/Card';
import Button from '../shared/Button';

const Login: React.FC = () => {
  const { setCurrentScreen, t } = useContext(AppContext);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showEmailVerificationWarning, setShowEmailVerificationWarning] = useState(false);
  const [resendLoading, setResendLoading] = useState(false);


  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    
    try {
      await authService.signInWithEmail(email, password);
      // If login successful, onAuthStateChanged will handle navigation to Dashboard
    } catch (err: any) {
      if (err.message === 'EMAIL_NOT_VERIFIED') {
        setError('‚ö†Ô∏è Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ email (bao g·ªìm c·∫£ th∆∞ m·ª•c Spam) v√† click v√†o link x√°c th·ª±c tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p. N·∫øu kh√¥ng t√¨m th·∫•y email, h√£y th·ª≠ ƒëƒÉng k√Ω l·∫°i.');
        setShowEmailVerificationWarning(true);
      } else if (err.code === 'auth/user-not-found') {
        setError('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i email.');
      } else if (err.code === 'auth/wrong-password') {
        setError('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.');
      } else if (err.code === 'auth/invalid-email') {
        setError('Email kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      } else if (err.code === 'auth/network-request-failed') {
        setError('L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi internet.');
      } else {
        setError('ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i.');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleResendVerification = async () => {
    if (!email) {
      setError('Vui l√≤ng nh·∫≠p email tr∆∞·ªõc khi g·ª≠i l·∫°i email x√°c th·ª±c.');
      return;
    }

    setResendLoading(true);
    setError(null);
    
    try {
      // Try to sign in first to get the user, then send verification
      await authService.signInWithEmail(email, password);
    } catch (err: any) {
      if (err.message === 'EMAIL_NOT_VERIFIED') {
        try {
          // User is signed in but not verified, send verification email
          await authService.sendEmailVerification();
          setError('‚úÖ Email x√°c th·ª±c ƒë√£ ƒë∆∞·ª£c g·ª≠i l·∫°i! Vui l√≤ng ki·ªÉm tra h·ªôp th∆∞ email.');
          setShowEmailVerificationWarning(false);
        } catch (verificationError) {
          setError('‚ùå Kh√¥ng th·ªÉ g·ª≠i email x√°c th·ª±c. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
      } else {
        setError('Vui l√≤ng nh·∫≠p ƒë√∫ng email v√† m·∫≠t kh·∫©u tr∆∞·ªõc khi g·ª≠i l·∫°i email x√°c th·ª±c.');
      }
    } finally {
      setResendLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col justify-center p-6 bg-brand-bg">
      <div className="w-full max-w-sm mx-auto">
        <h1 className="text-3xl font-bold text-brand-blue-dark text-center mb-6">{t('auth.loginTitle')}</h1>
        <Card>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-brand-text-primary mb-1">{t('auth.emailLabel')} *</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => {
                  setEmail(e.target.value);
                  // Only clear error if user is actively typing (not during form submission)
                  if (e.target.value !== email) {
                    setShowEmailVerificationWarning(false);
                    setError(null);
                  }
                }}
                required
                className="w-full p-3 border border-gray-300 rounded-lg bg-white text-brand-text-primary focus:ring-brand-blue focus:border-brand-blue"
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email"
                style={{ fontSize: '13px' }}
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-brand-text-primary mb-1">{t('auth.passwordLabel')} *</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => {
                  setPassword(e.target.value);
                  // Only clear error if user is actively typing (not during form submission)
                  if (e.target.value !== password) {
                    setShowEmailVerificationWarning(false);
                    setError(null);
                  }
                }}
                required
                minLength={6}
                className="w-full p-3 border border-gray-300 rounded-lg bg-white text-brand-text-primary focus:ring-brand-blue focus:border-brand-blue"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u (√≠t nh·∫•t 6 k√Ω t·ª±)"
                style={{ fontSize: '13px' }}
              />
            </div>
            <div className="text-center">
              <p className="text-sm text-slate-600 mb-2">
                Ch∆∞a c√≥ t√†i kho·∫£n? 
                <button 
                  onClick={() => setCurrentScreen(AppScreen.Signup)}
                  className="text-brand-blue hover:underline ml-1"
                >
                  ƒêƒÉng k√Ω ngay
                </button>
              </p>
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mt-3">
                <p className="text-xs text-blue-700 font-medium mb-1">
                  üìß H∆∞·ªõng d·∫´n x√°c th·ª±c email:
                </p>
                <p className="text-xs text-blue-600">
                  1. ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi<br/>
                  2. Ki·ªÉm tra email v√† click link x√°c th·ª±c<br/>
                  3. Quay l·∫°i ƒëƒÉng nh·∫≠p
                </p>
              </div>
            </div>
            {error && (
              <div className={`border rounded-lg p-3 ${error.includes('‚úÖ') ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'}`}>
                <p className={`text-sm text-center ${error.includes('‚úÖ') ? 'text-green-700' : 'text-red-700'}`}>{error}</p>
              </div>
            )}
            
            {showEmailVerificationWarning && (
              <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                <div className="flex items-start">
                  <div className="flex-shrink-0">
                    <svg className="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div className="ml-3 flex-1">
                    <h3 className="text-sm font-medium text-yellow-800">
                      Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c
                    </h3>
                    <div className="mt-2 text-sm text-yellow-700">
                      <p>ƒê·ªÉ ƒëƒÉng nh·∫≠p, b·∫°n c·∫ßn x√°c th·ª±c email tr∆∞·ªõc. H√£y:</p>
                      <ul className="list-disc list-inside mt-1 space-y-1">
                        <li>Ki·ªÉm tra h·ªôp th∆∞ email (bao g·ªìm th∆∞ m·ª•c Spam)</li>
                        <li>Click v√†o link x√°c th·ª±c trong email</li>
                        <li>Quay l·∫°i ƒëƒÉng nh·∫≠p sau khi x√°c th·ª±c</li>
                      </ul>
                    </div>
                    <div className="mt-3">
                      <button
                        type="button"
                        onClick={handleResendVerification}
                        disabled={resendLoading}
                        className="text-sm bg-yellow-100 hover:bg-yellow-200 text-yellow-800 px-3 py-1 rounded-md transition-colors disabled:opacity-50"
                      >
                        {resendLoading ? 'ƒêang g·ª≠i...' : 'G·ª≠i l·∫°i email x√°c th·ª±c'}
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}
            <div className="space-y-2">
              <Button type="submit" disabled={loading}>
                {loading ? '...' : t('auth.loginButton')}
              </Button>
              <button
                type="button"
                onClick={async () => {
                  try {
                    await authService.refreshUser();
                  } catch (error) {
                    // Silent fail for refresh
                  }
                }}
                className="w-full text-sm text-gray-500 hover:text-gray-700 underline"
              >
                ƒê√£ x√°c th·ª±c email? Click ƒë·ªÉ refresh
              </button>
            </div>
          </form>
        </Card>
        <p className="text-center text-sm text-brand-text-secondary mt-4">
          {t('auth.signupPrompt')}{' '}
          <button onClick={() => setCurrentScreen(AppScreen.Signup)} className="font-medium text-brand-blue hover:underline">
            {t('auth.signupTitle')}
          </button>
        </p>
      </div>
    </div>
  );
};

export default Login;
