import React, { useContext, useState } from 'react';
import { AppContext } from '../App';
import Header from './shared/Header';
import Card from './shared/Card';
import Chatbot from './shared/Chatbot';

const StudySupport: React.FC = () => {
  const { t } = useContext(AppContext);
  const [activeTab, setActiveTab] = useState<'guide' | 'resources' | 'tips' | 'chat'>('guide');

  const studyGuides = [
    {
      id: 1,
      title: 'H∆∞·ªõng d·∫´n h·ªçc Kaigo Fukushi t·ª´ c∆° b·∫£n',
      description: 'L·ªô tr√¨nh h·ªçc t·∫≠p t·ª´ A-Z cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
      icon: 'üìö',
      difficulty: 'C∆° b·∫£n',
      duration: '3-6 th√°ng',
      topics: ['Ki·∫øn th·ª©c c∆° b·∫£n', 'Thu·∫≠t ng·ªØ y t·∫ø', 'K·ªπ nƒÉng giao ti·∫øp']
    },
    {
      id: 2,
      title: 'Chi·∫øn l∆∞·ª£c l√†m b√†i thi hi·ªáu qu·∫£',
      description: 'C√°ch ph√¢n b·ªï th·ªùi gian v√† k·ªπ thu·∫≠t l√†m b√†i thi',
      icon: 'üéØ',
      difficulty: 'Trung b√¨nh',
      duration: '1-2 th√°ng',
      topics: ['Qu·∫£n l√Ω th·ªùi gian', 'Ph√¢n t√≠ch c√¢u h·ªèi', 'Chi·∫øn thu·∫≠t ch·ªçn ƒë√°p √°n']
    },
    {
      id: 3,
      title: 'Luy·ªán t·∫≠p theo ch·ªß ƒë·ªÅ chuy√™n s√¢u',
      description: 'H·ªçc s√¢u t·ª´ng lƒ©nh v·ª±c c·ªßa Kaigo Fukushi',
      icon: 'üî¨',
      difficulty: 'N√¢ng cao',
      duration: '2-4 th√°ng',
      topics: ['ChƒÉm s√≥c ng∆∞·ªùi cao tu·ªïi', 'Y t·∫ø c∆° b·∫£n', 'T√¢m l√Ω h·ªçc']
    }
  ];

  const studyResources = [
    {
      id: 1,
      title: 'S√°ch gi√°o khoa ch√≠nh th·ª©c',
      description: 'T√†i li·ªáu ch√≠nh th·ª©c t·ª´ B·ªô Y t·∫ø Nh·∫≠t B·∫£n',
      type: 'S√°ch',
      language: 'Ti·∫øng Nh·∫≠t',
      download: true
    },
    {
      id: 2,
      title: 'Video b√†i gi·∫£ng',
      description: 'C√°c video h∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ chuy√™n gia',
      type: 'Video',
      language: 'Ti·∫øng Vi·ªát',
      download: false
    },
    {
      id: 3,
      title: 'Flashcards t·ª´ v·ª±ng',
      description: 'B·ªô th·∫ª h·ªçc t·ª´ v·ª±ng chuy√™n ng√†nh',
      type: 'Flashcard',
      language: 'ƒêa ng√¥n ng·ªØ',
      download: true
    },
    {
      id: 4,
      title: 'ƒê·ªÅ thi m·∫´u',
      description: 'B·ªô s∆∞u t·∫≠p ƒë·ªÅ thi c√°c nƒÉm tr∆∞·ªõc',
      type: 'ƒê·ªÅ thi',
      language: 'Ti·∫øng Nh·∫≠t',
      download: true
    }
  ];

  const studyTips = [
    {
      category: 'Ph∆∞∆°ng ph√°p h·ªçc',
      tips: [
        'H·ªçc t·ª´ v·ª±ng m·ªói ng√†y 30 ph√∫t',
        'L√†m b√†i t·∫≠p th·ª±c h√†nh th∆∞·ªùng xuy√™n',
        'Ghi ch√∫ v√† t√≥m t·∫Øt ki·∫øn th·ª©c',
        'H·ªçc nh√≥m ƒë·ªÉ trao ƒë·ªïi kinh nghi·ªám'
      ]
    },
    {
      category: 'Chu·∫©n b·ªã thi',
      tips: [
        'L√†m ƒë·ªÅ thi m·∫´u trong th·ªùi gian quy ƒë·ªãnh',
        '√în t·∫≠p l·∫°i ki·∫øn th·ª©c y·∫øu',
        'Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß tr∆∞·ªõc ng√†y thi',
        'Chu·∫©n b·ªã t√¢m l√Ω tho·∫£i m√°i'
      ]
    },
    {
      category: 'K·ªπ nƒÉng l√†m b√†i',
      tips: [
        'ƒê·ªçc k·ªπ ƒë·ªÅ b√†i tr∆∞·ªõc khi tr·∫£ l·ªùi',
        'Lo·∫°i b·ªè c√°c ƒë√°p √°n sai r√µ r√†ng',
        'Qu·∫£n l√Ω th·ªùi gian h·ª£p l√Ω',
        'Ki·ªÉm tra l·∫°i ƒë√°p √°n tr∆∞·ªõc khi n·ªôp b√†i'
      ]
    }
  ];

  const renderStudyGuides = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-gray-800 mb-4">H∆∞·ªõng d·∫´n h·ªçc t·∫≠p</h3>
      {studyGuides.map(guide => (
        <Card key={guide.id} className="hover:shadow-lg transition-shadow">
          <div className="flex items-start space-x-4">
            <div className="text-4xl">{guide.icon}</div>
            <div className="flex-1">
              <h4 className="text-lg font-semibold text-gray-800 mb-2">{guide.title}</h4>
              <p className="text-gray-600 mb-3">{guide.description}</p>
              <div className="flex flex-wrap gap-2 mb-3">
                <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                  {guide.difficulty}
                </span>
                <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                  {guide.duration}
                </span>
              </div>
              <div className="flex flex-wrap gap-1">
                {guide.topics.map((topic, index) => (
                  <span key={index} className="px-2 py-1 bg-gray-100 text-gray-700 text-xs rounded">
                    {topic}
                  </span>
                ))}
              </div>
            </div>
            <button className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
              B·∫Øt ƒë·∫ßu
            </button>
          </div>
        </Card>
      ))}
    </div>
  );

  const renderStudyResources = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-gray-800 mb-4">T√†i li·ªáu h·ªçc t·∫≠p</h3>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {studyResources.map(resource => (
          <Card key={resource.id} className="hover:shadow-lg transition-shadow">
            <div className="flex items-start justify-between">
              <div className="flex-1">
                <h4 className="text-lg font-semibold text-gray-800 mb-2">{resource.title}</h4>
                <p className="text-gray-600 mb-3">{resource.description}</p>
                <div className="flex flex-wrap gap-2">
                  <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs rounded-full">
                    {resource.type}
                  </span>
                  <span className="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">
                    {resource.language}
                  </span>
                </div>
              </div>
              <div className="flex flex-col space-y-2">
                {resource.download && (
                  <button className="px-3 py-1 bg-green-500 text-white text-sm rounded hover:bg-green-600 transition-colors">
                    T·∫£i v·ªÅ
                  </button>
                )}
                <button className="px-3 py-1 bg-blue-500 text-white text-sm rounded hover:bg-blue-600 transition-colors">
                  Xem
                </button>
              </div>
            </div>
          </Card>
        ))}
      </div>
    </div>
  );

  const renderStudyTips = () => (
    <div className="space-y-6">
      <h3 className="text-xl font-bold text-gray-800 mb-4">M·∫πo h·ªçc t·∫≠p</h3>
      {studyTips.map((section, index) => (
        <Card key={index} className="hover:shadow-lg transition-shadow">
          <h4 className="text-lg font-semibold text-gray-800 mb-3 flex items-center">
            <span className="w-8 h-8 bg-blue-500 text-white rounded-full flex items-center justify-center mr-3 text-sm font-bold">
              {index + 1}
            </span>
            {section.category}
          </h4>
          <ul className="space-y-2">
            {section.tips.map((tip, tipIndex) => (
              <li key={tipIndex} className="flex items-start space-x-2">
                <span className="w-2 h-2 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                <span className="text-gray-700">{tip}</span>
              </li>
            ))}
          </ul>
        </Card>
      ))}
    </div>
  );

  const renderChatSupport = () => (
    <div className="space-y-4">
      <h3 className="text-xl font-bold text-gray-800 mb-4">H·ªó tr·ª£ tr·ª±c tuy·∫øn</h3>
      <Card className="h-96">
        <Chatbot />
      </Card>
    </div>
  );

  return (
    <div>
      <Header title="H·ªó tr·ª£ h·ªçc t·∫≠p Kaigo Fukushi" />
      <div className="p-4 md:p-6">
        {/* Tab Navigation */}
        <div className="mb-6">
          <div className="flex flex-wrap gap-2 border-b border-gray-200">
            {[
              { id: 'guide', label: 'H∆∞·ªõng d·∫´n', icon: 'üìö' },
              { id: 'resources', label: 'T√†i li·ªáu', icon: 'üìñ' },
              { id: 'tips', label: 'M·∫πo h·ªçc', icon: 'üí°' },
              { id: 'chat', label: 'H·ªó tr·ª£', icon: 'üí¨' }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id as any)}
                className={`flex items-center space-x-2 px-4 py-2 rounded-t-lg transition-colors ${
                  activeTab === tab.id
                    ? 'bg-blue-500 text-white'
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <span>{tab.icon}</span>
                <span>{tab.label}</span>
              </button>
            ))}
          </div>
        </div>

        {/* Tab Content */}
        <div className="min-h-96">
          {activeTab === 'guide' && renderStudyGuides()}
          {activeTab === 'resources' && renderStudyResources()}
          {activeTab === 'tips' && renderStudyTips()}
          {activeTab === 'chat' && renderChatSupport()}
        </div>

        {/* Quick Actions */}
        <div className="mt-8">
          <h3 className="text-xl font-bold text-gray-800 mb-4">H√†nh ƒë·ªông nhanh</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <div className="text-4xl mb-3">üéØ</div>
              <h4 className="font-semibold text-gray-800 mb-2">L√†m b√†i ki·ªÉm tra</h4>
              <p className="text-gray-600 text-sm">Ki·ªÉm tra ki·∫øn th·ª©c hi·ªán t·∫°i</p>
            </Card>
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <div className="text-4xl mb-3">üìä</div>
              <h4 className="font-semibold text-gray-800 mb-2">Xem ti·∫øn ƒë·ªô</h4>
              <p className="text-gray-600 text-sm">Theo d√µi qu√° tr√¨nh h·ªçc t·∫≠p</p>
            </Card>
            <Card className="text-center hover:shadow-lg transition-shadow cursor-pointer">
              <div className="text-4xl mb-3">üèÜ</div>
              <h4 className="font-semibold text-gray-800 mb-2">Thi th·ª≠</h4>
              <p className="text-gray-600 text-sm">Luy·ªán t·∫≠p v·ªõi ƒë·ªÅ thi th·∫≠t</p>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default StudySupport;
